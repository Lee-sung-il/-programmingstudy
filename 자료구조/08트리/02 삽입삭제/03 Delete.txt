#include <stdio.h>
#include <stdlib.h>

typedef struct treeNode
{
	char key;				// 데이터 필드
	struct treeNode* left;	// 왼쪽 서브 트리 링크 필드
	struct treeNode* right;	// 오른쪽 서브 트리 링크 필드
} treeNode;

treeNode* root = NULL;


//탐색 함수

treeNode* search(char x)
{

	// 1 시작노드 주소 *p 로 받음
	// 2 p가 NULL일때까지 계속 반복
	// 3 p->key와 x 를 비교 
	// 3-1 p->key == x
	// 3-1 p->key > x
	// 3-1 p->key < x

	treeNode* p;
	p = root;


	while (p != NULL)
	{
		if (x < p->key)
			p = p->left;
		else if (x == p->key)
			return p;
		else
			p = p->right;
	}
	//printf("찾는 키가 없습니다\n");
	return p;
}

// 노드 삽입 함수 
void insertNode(char x) {

	//0 동일한 키값 존재여부 확인 
	//1 노드 생성
	//2 값 넣기
	//3 링크 초기화
	//4 노드가 없다면
	//5 노드가 있다면 부모노드의 위치 탐색
	//5-1 부모노드가 root라면 
	//5-2 부모노드가 root가 아니라면


	//해당 키가 존재하는지 확인 
	if (search(x) != NULL)
	{
		printf("해당 키가 이미 있습니다,삽입 불가!\n");
		return;
	}
	//새로운 노드 생성
	treeNode* new = (treeNode*)malloc(sizeof(treeNode));
	if (new == NULL)
	{
		printf("할당 공간 없음\n");
		exit(1);
	}
	new->key = x;
	new->left = NULL;
	new->right = NULL;

	//삽입위치의 부모노드 탐색
	treeNode* cur = root;
	treeNode* par = NULL;
	if (root == NULL)	//노드가 하나도 없다면 
	{
		root = new;
	}
	else //노드가 하나이상 있을때
	{
		//부모노드가 root노드인경우
		if (root->left == NULL && root->right == NULL)
		{
			if (cur->key > x)
				cur->left = new;
			else
				cur->right = new;
		}
		else
		{
			//부모노드가 root노드가 아닌경우
			while (cur != NULL)
			{
				par = cur;
				if (x > cur->key)
					cur = cur->right;
				else
					cur = cur->left;
			}
			//par 위치 찾음 , cur는 NULL
			if (x < par->key)
				par->left = new;
			else
				par->right = new;

		}

	}
}

// 노드 삭제 함수 
void deleteNode(char key)
{
	


}

// 이진 탐색 트리를 중위 순회하면서 출력하는 연산
void displayInorder(treeNode* cur) {
	if (cur) {
		displayInorder(cur->left);
		printf("%c_", cur->key);
		displayInorder(cur->right);
	}
}

void menu() {
	printf("\n*---------------------------*");
	printf("\n\t1 : 트리 출력");
	printf("\n\t2 : 문자 삽입");
	printf("\n\t3 : 문자 삭제");
	printf("\n\t4 : 문자 검색");
	printf("\n\t5 : 종료");
	printf("\n*---------------------------*");
	printf("\n메뉴입력 >> ");
}

int main() {
	treeNode* foundedNode = NULL;
	char choice, key;

	// [그림 7-38]과 같은 초기 이진 탐색 트리를 구성하고
	// 노드 G를 루트 노드 포인터 root로 지정
	insertNode('G');
	insertNode('I');
	insertNode('H');
	insertNode('C');
	insertNode('B');
	insertNode('M');
	insertNode('N');
	insertNode('A');
	insertNode('J');
	insertNode('E');
	insertNode('D');
	insertNode('Q');

	while (1) {
		menu();
		fflush(stdout);
		scanf_s(" %c", &choice, sizeof(choice));

		switch (choice - '0') {
		case 1:
			//			printf("\t[이진 트리 출력]  ");
			displayInorder(root);  printf("\n");
			break;

		case 2:
			printf("삽입할 문자를 입력하세요 : ");
			fflush(stdout);
			scanf_s(" %c", &key, sizeof(key));
			insertNode(key);
			displayInorder(root);  printf("\n");
			break;

		case 3:
			printf("삭제할 문자를 입력하세요 : ");
			fflush(stdout);
			scanf_s(" %c", &key, sizeof(key));
			deleteNode(key);
			displayInorder(root);  printf("\n");
			break;

		case 4:
			printf("찾을 문자를 입력하세요 : ");
			fflush(stdout);
			scanf_s(" %c", &key, sizeof(key));
			foundedNode = search(key);
			if (foundedNode != NULL)
				printf("\n %c를 찾았습니다! \n", foundedNode->key);
			else
				printf("\n 문자를 찾지 못했습니다. \n");
			break;

		case 5:
			return 0;

		default:
			printf("없는 메뉴입니다. 메뉴를 다시 선택하세요! \n");
			break;
		}
	}
	return 0;

}
